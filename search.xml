<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>走好下一步</title>
      <link href="/2020/05/23/reload/"/>
      <url>/2020/05/23/reload/</url>
      
        <content type="html"><![CDATA[<p>抛下过去，走向未来，成就自己</p><a id="more"></a><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>大三下学期，觉得自己不能就此沉沦。想着自己好歹算个计算机沾边的专业，去找一份编程相关的工作，应该还是有搞头的。</p><p>在图书馆看到一本《web工程师的自我修养》，心里波澜起伏。于是，就在前端的路上一去不复返~</p><h6 id="折戟"><a href="#折戟" class="headerlink" title="折戟"></a>折戟</h6><p>实习去了一家高歌猛进，疯狂增长的现已上市的在线教育公司，当我满怀憧憬，准备大干一场，现实却给我来了一记狠狠的patch。</p><p>对于没有任何项目经验，只学了俩个月基础的我来说；每天醍醐灌顶，很多事情并没有做到自己能做到的最好，更多的失误，脑子犯浑，给决定我实习是否通过的师傅留下了能力不足的印象。</p><p>从未想过会有这样的结果，每天睡不着，很多就来到工位学习知道晚上9点，与大家一起开早会，完成几个简单的任务，一起极乐汤团建，参加年会….</p><p> 对我的打击是巨大的，听着HRBP安慰的语音，思绪翻涌。我甚至开始怀疑自己真正是否能够胜任这份工作，我是不是应该听爸妈的话，回去小县城去考公务员….各种怀疑，不自信的负面情绪就像潮汐一般，想要推得越远，却弹回来越远。我知道，我失去了这辈子最重要的第二次机会。</p><h6 id="重启？改变？"><a href="#重启？改变？" class="headerlink" title="重启？改变？"></a>重启？改变？</h6><p>在颓废2个月后，房租，电费，燃气费，一条条短信提醒着我，不能再这样下去了。</p><p>于是降低自己的要求，在武汉这样一个大环境都是外包的条件下，匆匆就签了一个40人，只有1个前端的科技公司….</p><p>嗯，是的，对于现状非常不满意。每天写着不太感兴趣的业务，改着稀烂的代码。 如果非要说进步，那大概是磨平了棱角，刷新了对客户的认知，熟悉了微信这样稀烂的开发环境… 我仍然没有放弃，努力在工作空余时间，去看点东西，但就像一只无头苍蝇一般，乱撞。</p><p>着学习的事情不能一蹴而就，得持之以恒，系统的学。就从<strong>红宝书</strong>开始，重学基础，然后就去肯Vue源码。现在对Vue2.x的双向绑定，虚拟DOM，模板编译都有一定理解，源码中没有秘密。</p><h6 id="如果迷茫了就开始制定计划吧"><a href="#如果迷茫了就开始制定计划吧" class="headerlink" title="如果迷茫了就开始制定计划吧"></a>如果迷茫了就开始制定计划吧</h6><p>迷茫来自于下时代5G的浪潮，每次通信革命都让人们的生活发生翻天覆地的变化..这次也毫不例外。是继续在本就过饱和的互联网继续挣扎还是去把握住新的风口机会？但相信自己的条件，并没有机会去抓住新风口，只能继续前进，但紧跟变化发展，发挥自己的洞察力，找到合适的机会！</p><p>刚毕业快一年，想着给自己定一个目标。</p><p>毕业3年内，在武汉工资过万或者进入一家心里满意的公司。对前端的技能很熟练，可以独自解决业务难点，养成良好编码习惯。熟练Vue与react，啃完Vue2.x,3.x源码；深入使用canvas或者进击数据可视化等等有深度的领域。 能够写py或者其他后端语言，去捡起SQL，碰碰服务端的数据库，服务器等等。</p><p>今年，一定要跳槽！ </p><p>冲鸭！</p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的变化侦测</title>
      <link href="/2020/05/22/Vue-source-learn2/"/>
      <url>/2020/05/22/Vue-source-learn2/</url>
      
        <content type="html"><![CDATA[<p>Vue的响应式数据是如何做到的？</p><a id="more"></a><h4 id="变化侦测"><a href="#变化侦测" class="headerlink" title="变化侦测"></a>变化侦测</h4><ul><li><p>变化侦测 = 数据观测+依赖收集+依赖更新</p><ol><li>使用Object.defineProperty来使得数据变得可“观测”</li><li>依赖收集(Observer)：是指收集视图里的部分与数据绑定的关系</li><li>在getter中收集依赖，在setter中通知更新依赖</li><li>典型的发布-订阅模式,为了解耦，新增了一个管理对象</li><li>dep(收集某个数据相关的所有依赖)，watcher(被dep通知，更新依赖)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer.js</span></span><br><span class="line"><span class="comment">// 收集依赖</span></span><br><span class="line"><span class="keyword">const</span> Dep = <span class="built_in">require</span>(<span class="string">'./dep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(value) &#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">def(value, <span class="string">"__ob__"</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"array"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.walk(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">walk(obj) &#123;</span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">defineReactive(obj,keys[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> Observer(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            dep.depend();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val === newval) <span class="keyword">return</span>;</span><br><span class="line">            val = newval;</span><br><span class="line">            dep.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dep.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖管理器： 1数据 ：n依赖 的一对多关系进行依赖管理，收集某个数据相关的所有依赖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeSub(sub) &#123;</span><br><span class="line">        remove(<span class="keyword">this</span>.subs, sub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="built_in">window</span>.target &amp;&amp; <span class="keyword">this</span>.addSub(<span class="built_in">window</span>.target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; subs.length; i++) &#123;</span><br><span class="line">            subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> itemIndex = arr.indexOf(item);</span><br><span class="line">        <span class="keyword">if</span> (itemIndex &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr.splice(itemIndex, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  watcher表示依赖关系，通知视图更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// window.target是为了拷贝一份 watcher,添加到Dep的依赖数组中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(vm, expOrFn, cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">        <span class="keyword">this</span>.cb = cb;</span><br><span class="line">        <span class="keyword">this</span>.getter = parsePath(expOrFn);</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="built_in">window</span>.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.getter.call(vm, vm);</span><br><span class="line">        <span class="built_in">window</span>.target = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</span><br><span class="line">        <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.value, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把一个形如'data.a.b.c'的字符串路径所表示的值，从真实的data对象中取出来</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * data = &#123;a:&#123;b:&#123;c:2&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment"> * parsePath('a.b.c')(data)  // 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bailRE = <span class="regexp">/[^\w.$]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parsePath</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bailRE.test(path)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> segements = path.split(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; segements.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!obj) <span class="keyword">return</span>;</span><br><span class="line">            obj = obj[segements[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="侦测流程"><a href="#侦测流程" class="headerlink" title="侦测流程"></a>侦测流程</h4></li></ul><p>  <img src="http://m.qpic.cn/psc?/V14Ny1NJ1hfPZT/T0po5IVZeaNliPGRfxFJTpvnvhXceHb2BiTFiZAVRik4Grz5Ucuvqxon5*B7hvq9Qw7z*mYj8iEw.fLaTwl76xwAhLUJ5aOEfe8M*lTjbz8!/b&bo=lAPgAZQD4AEDCSw!&rf=viewer_4" alt=""><strong><code>vue</code>这套变化侦测的缺点很明显，因为利用<code>defineProperty</code>来进行收集，只限于读和写已有值，当我们对<code>obj</code>进行新增或者删除属性值时，它是监听不到的</strong>。所以在官网文档上的叙述上说明过，对数组或对象的直接增加或者删除会产生不期望的结果， 为了解决这一问题，特地增加了<code>Vue.set</code>和<code>Vue.delete</code>两个全局API 。</p><p>  <strong>数组怎么办</strong>?</p><p>  看到这里，对原型熟悉的人可能会问了，这种方法只针对于<code>Obj</code>类型，那剩下的常用的<code>Arr</code>类型或者其他类型呢？<code>defineProperty</code>数组是不可能使用的，那么我们应该怎么对数组进行依赖收集和通知更新？</p><p>  还是延续上面的思想：拦截，<code>vue</code>将所有数组的异变方法(能改变原有数组)拦截一波，就能知道<code>arr</code>啥时候被<code>setter</code>了。</p><p>  经常面试被问到原型，原型链的what,why,那么how????  我觉得这就是个很巧妙的实践~</p><p>  拦截数组原型上的异变方法(会改变原有宿主的方法)的代码：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码位置 vue/src/core/observer/array.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * not type checking this file because flow doesn't play well with</span></span><br><span class="line"><span class="comment"> * dynamically accessing methods on Array prototype</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; def &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数组依赖收集"><a href="#数组依赖收集" class="headerlink" title="数组依赖收集"></a>数组依赖收集</h4><p>  无论怎样,先得用<code>walk</code>让元素注入observer依赖，使得在<code>getter</code>中实例化<code>Dep</code>收集依赖并将数组方法拦截掉</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码位置：/src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">const</span> Dep = <span class="built_in">require</span>(<span class="string">"./dep"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; arrayKeys, arrayMethods &#125; = <span class="built_in">require</span>(<span class="string">"./array"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码位置：src/core/observer/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 defineProperty 让数据可观测</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(value) &#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line"><span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep();</span><br><span class="line">def(value, <span class="string">"__ob__"</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line"><span class="keyword">const</span> agument = hasProto ? protoAugment : copyAugument;</span><br><span class="line">[agument](value, arrayMethods, arrayKeys);</span><br><span class="line"><span class="keyword">this</span>.observerArray(value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.walk(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">walk(obj) &#123;</span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">defineReactive(obj, keys[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observerArray(ietms) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ietms.length; i++) &#123;</span><br><span class="line">observe(ietms[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hasProto = <span class="string">"__proto__"</span> <span class="keyword">in</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    复制原型属性，添加拦截</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protoAugment</span>(<span class="params">target, src, keys</span>) </span>&#123;</span><br><span class="line">target.__proto__ = src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyAugument</span>(<span class="params">target, src, keys</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line"><span class="keyword">const</span> key = key[i];</span><br><span class="line">def(target, key, src[key]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  尝试为value创建一个0bserver实例，如果创建成功，直接返回新创建的Observer实例。</span></span><br><span class="line"><span class="comment"> *  如果 Value 已经存在一个Observer实例，则直接返回它</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ob;</span><br><span class="line">    <span class="keyword">if</span> (hasOwn(value, <span class="string">'__ob__'</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">        ob = value.__ob__;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ob = <span class="keyword">new</span> Observer(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> childOb = observe(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">val = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">"object"</span>) &#123;</span><br><span class="line"><span class="keyword">new</span> Observer(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">enumerable: <span class="literal">true</span>,</span><br><span class="line">configurable: <span class="literal">true</span>,</span><br><span class="line"><span class="keyword">get</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">childOb.dep.depend();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(newval) &#123;</span><br><span class="line"><span class="keyword">if</span> (val === newval) <span class="keyword">return</span>;</span><br><span class="line">val = newval;</span><br><span class="line">dep.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通知更新"><a href="#通知更新" class="headerlink" title="通知更新"></a>通知更新</h4><p>   主要是还要对数组进行深度监测和新增元素侦测，在拦截的原型上进行依赖更新。</p><p>  <code>__ob__</code>是在进行初始化observer的时候，在被监听者上面挂载了自己的实例，以便访问后进行依赖更新。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码位置：vue/src/core/observer/array.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * not type checking this file because flow doesn't play well with</span></span><br><span class="line"><span class="comment"> * dynamically accessing methods on Array prototype</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; def &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>总结： <code>vue</code>的变化侦测与<code>React</code>对比Vdom和<code>Angular</code>的脏值检测都不一样。核心是利用<code>defineProperty</code>的能力，拦截所有绑定的响应式数据(data中),在拦截中添加依赖管理器<code>Dep</code>来收集管理依赖,用<code>Watcher</code>表示依赖关系本身，进行通知依赖更新。</p><p>其中，对于数组的侦测的思路是，覆盖所有数组原型的的异变方法，在覆盖后植入依赖逻辑。这套缺点就是对数组进行下标赋值操作时，vue是侦测不到的，官网文档上多处对此有说明。</p><p>相信下次，面试官问：为什么在<code>vue</code>中对数组下标进行赋值操作会导致不正确的响应式数据结果。这种类似的问题，你一定胸有成竹。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue源码学习（开篇）</title>
      <link href="/2020/05/10/Vue-source-learn1/"/>
      <url>/2020/05/10/Vue-source-learn1/</url>
      
        <content type="html"><![CDATA[<p>应该如何学习源码？ 我觉得最开始有个全局观，然后切入细节的模块，带着问题去读。</p><a id="more"></a><h3 id="vue源码学习笔记"><a href="#vue源码学习笔记" class="headerlink" title="vue源码学习笔记"></a>vue源码学习笔记</h3><blockquote><p>本篇结合了阅读 <a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/" target="_blank" rel="noopener">https://nlrx-wjc.github.io/Learn-Vue-Source-Code/</a> 的笔记，感谢wjc199366(wx)开源。</p><p>现在应该看不了了，因为发生了一些事情，大概是人民邮电出版社以影响旗下《深入浅出Vue.js》销量为由，联系微软，将电子书的仓库给关了…..</p><p>不过好在关闭之前，留了一份在本地，需要的加我微信取：tangtang1996918</p><p>阅读源码之前，建议去看看<a href="https://github.com/HcySunYang" target="_blank" rel="noopener">HcySunYang</a>大佬对vue2/3中一些重要概念的解读：</p><p><a href="http://hcysun.me/vue-design/zh/essence-of-comp.html" target="_blank" rel="noopener">http://hcysun.me/vue-design/zh/essence-of-comp.html</a></p><p>例如：组件传出的本质是什么？Vnode是如何设计的？Vnode是如何挂载为真实DOM的？</p><p>对阅读源码，理清思路是非常有帮助的~</p><p>源码之中没有秘密~</p></blockquote><h5 id="1-路线"><a href="#1-路线" class="headerlink" title="1.路线"></a>1.路线</h5><ol><li><p>变化侦测篇</p><p>学习<code>Vue</code>中如何实现数据的响应式系统，从而达到数据驱动视图。</p></li><li><p>虚拟DOM篇</p><p>学习什么是虚拟DOM，以及<code>Vue</code>中的<code>DOM-Diff</code>原理</p></li><li><p>模板编译篇</p><p>学习<code>Vue</code>内部是怎么把<code>template</code>模板编译成虚拟<code>DOM</code>,从而渲染出真实<code>DOM</code></p></li><li><p>生命周期篇</p><p>学习<code>Vue</code>中组件的生命周期实现原理</p></li><li><p>实例方法篇</p><p>学习<code>Vue</code>中所有实例方法(即所有以<code>$</code>开头的方法)的实现原理</p></li><li><p>全局API篇</p><p>学习<code>Vue</code>中所有全局<code>API</code>的实现原理</p></li><li><p>指令篇</p><p>学习<code>Vue</code>中所有指令的实现原理</p></li><li><p>过滤器篇</p><p>学习<code>Vue</code>中所有过滤器的实现原理</p></li><li><p>内置组件篇</p><p>学习<code>Vue</code>中内置组件的实现原理</p></li></ol><h5 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h5><p>面对繁复的源码，我们应该怎么去读？ 说下适合我自己的读源码方法，<strong>抛砖引玉</strong>。</p><p>一本正经的一行行的看源码，我只能说兄弟，你他娘的真是个天才</p><p>1.一般我先扫一眼import引入的都是那些模块的js文件，一般源码的目录结构都清晰。根据引入的js文件大概都看出该js文件的依赖性，我们可以根据依赖项的多少来判断复杂程度，有个心理预期。</p><p>2.然后去看js文件主函数的输入和输出，即传参和返回都是什么，先搞清楚其主要功能。</p><p>对。不是一上来就一行行的看逻辑代码，除非你有超强的理解能力，一般是很吃力的。所以我们就先假装自己是个debug工具，先设置跳过全部函数内部细节，只观察主函数和各个内部子函数的输入和输出。(这期间肯定少不了去查看上一部引入的函数功能)。如果结合注释看了很多输入输出还是不明白其作用，那也很正常。</p><p>接下来，我们可以复制一下代码片段，做一些测试来证实部分我们对某些函数功能的猜想。有了这些，我们脑中大多都能有个框架。</p><p>其实这跟证明数学题的思路十分类似，先提出假设，然后用各种公理，定理来慢慢推导证明。</p><p>3.深入每个函数内部的细节。这个就八仙过海各显神通了。不过我觉得还可以先做减法，即根据注释解决兼容性和一些判断环境的hack先给屏蔽掉，关注每个函数主要的逻辑，等把整个模块的脉络弄清楚后，有空再去看看哪些hack。细节不清楚的同样测试，用结果去逆推过程。</p><p>4.做笔记，自己写一遍梳理清楚，把你觉得一些很精妙的思路，有趣的类比联想，方法总结，都可以记录下来</p><p>复杂的东西都是由简单的东西构成，人们擅长将东西变复杂，却不擅长将东西变简单。</p><h5 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h5><p>强烈建议浏览一遍，源码中很多都是复用的，纵观全局，再某些判断上是能够帮上忙的~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─ compiler</span><br><span class="line">│    ├─ codeframe.js</span><br><span class="line">│    ├─ codegen</span><br><span class="line">│    │    ├─ events.js</span><br><span class="line">│    │    └─ index.js</span><br><span class="line">│    ├─ create-compiler.js</span><br><span class="line">│    ├─ directives</span><br><span class="line">│    │    ├─ bind.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ model.js</span><br><span class="line">│    │    └─ on.js</span><br><span class="line">│    ├─ error-detector.js</span><br><span class="line">│    ├─ helpers.js</span><br><span class="line">│    ├─ index.js</span><br><span class="line">│    ├─ optimizer.js</span><br><span class="line">│    ├─ parser</span><br><span class="line">│    │    ├─ entity-decoder.js</span><br><span class="line">│    │    ├─ filter-parser.js</span><br><span class="line">│    │    ├─ html-parser.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    └─ text-parser.js</span><br><span class="line">│    └─ to-function.js</span><br><span class="line">├─ core</span><br><span class="line">│    ├─ components</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    └─ keep-alive.js</span><br><span class="line">│    ├─ config.js</span><br><span class="line">│    ├─ global-api</span><br><span class="line">│    │    ├─ assets.js</span><br><span class="line">│    │    ├─ extend.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ mixin.js</span><br><span class="line">│    │    └─ use.js</span><br><span class="line">│    ├─ index.js</span><br><span class="line">│    ├─ instance</span><br><span class="line">│    │    ├─ events.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ init.js</span><br><span class="line">│    │    ├─ inject.js</span><br><span class="line">│    │    ├─ lifecycle.js</span><br><span class="line">│    │    ├─ proxy.js</span><br><span class="line">│    │    ├─ render-helpers</span><br><span class="line">│    │    ├─ render.js</span><br><span class="line">│    │    └─ state.js</span><br><span class="line">│    ├─ observer</span><br><span class="line">│    │    ├─ array.js</span><br><span class="line">│    │    ├─ dep.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ scheduler.js</span><br><span class="line">│    │    ├─ traverse.js</span><br><span class="line">│    │    └─ watcher.js</span><br><span class="line">│    ├─ util</span><br><span class="line">│    │    ├─ debug.js</span><br><span class="line">│    │    ├─ env.js</span><br><span class="line">│    │    ├─ error.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ lang.js</span><br><span class="line">│    │    ├─ next-tick.js</span><br><span class="line">│    │    ├─ options.js</span><br><span class="line">│    │    ├─ perf.js</span><br><span class="line">│    │    └─ props.js</span><br><span class="line">│    └─ vdom</span><br><span class="line">│           ├─ create-component.js</span><br><span class="line">│           ├─ create-element.js</span><br><span class="line">│           ├─ create-functional-component.js</span><br><span class="line">│           ├─ helpers</span><br><span class="line">│           ├─ modules</span><br><span class="line">│           ├─ patch.js</span><br><span class="line">│           └─ vnode.js</span><br><span class="line">├─ platforms</span><br><span class="line">│    ├─ web</span><br><span class="line">│    │    ├─ compiler</span><br><span class="line">│    │    ├─ entry-compiler.js</span><br><span class="line">│    │    ├─ entry-runtime-with-compiler.js</span><br><span class="line">│    │    ├─ entry-runtime.js</span><br><span class="line">│    │    ├─ entry-server-basic-renderer.js</span><br><span class="line">│    │    ├─ entry-server-renderer.js</span><br><span class="line">│    │    ├─ runtime</span><br><span class="line">│    │    ├─ server</span><br><span class="line">│    │    └─ util</span><br><span class="line">│    └─ weex</span><br><span class="line">│           ├─ compiler</span><br><span class="line">│           ├─ entry-compiler.js</span><br><span class="line">│           ├─ entry-framework.js</span><br><span class="line">│           ├─ entry-runtime-factory.js</span><br><span class="line">│           ├─ runtime</span><br><span class="line">│           └─ util</span><br><span class="line">├─ server</span><br><span class="line">│    ├─ bundle-renderer</span><br><span class="line">│    │    ├─ create-bundle-renderer.js</span><br><span class="line">│    │    ├─ create-bundle-runner.js</span><br><span class="line">│    │    └─ source-map-support.js</span><br><span class="line">│    ├─ create-basic-renderer.js</span><br><span class="line">│    ├─ create-renderer.js</span><br><span class="line">│    ├─ optimizing-compiler</span><br><span class="line">│    │    ├─ codegen.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ modules.js</span><br><span class="line">│    │    ├─ optimizer.js</span><br><span class="line">│    │    └─ runtime-helpers.js</span><br><span class="line">│    ├─ render-context.js</span><br><span class="line">│    ├─ render-stream.js</span><br><span class="line">│    ├─ render.js</span><br><span class="line">│    ├─ template-renderer</span><br><span class="line">│    │    ├─ create-async-file-mapper.js</span><br><span class="line">│    │    ├─ index.js</span><br><span class="line">│    │    ├─ parse-template.js</span><br><span class="line">│    │    └─ template-stream.js</span><br><span class="line">│    ├─ util.js</span><br><span class="line">│    ├─ webpack-plugin</span><br><span class="line">│    │    ├─ client.js</span><br><span class="line">│    │    ├─ server.js</span><br><span class="line">│    │    └─ util.js</span><br><span class="line">│    └─ write.js</span><br><span class="line">├─ sfc</span><br><span class="line">│    └─ parser.js</span><br><span class="line">└─ shared</span><br><span class="line">       ├─ constants.js</span><br><span class="line">       └─ util.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建对象的几种方式</title>
      <link href="/2019/08/25/object-create/"/>
      <url>/2019/08/25/object-create/</url>
      
        <content type="html"><![CDATA[<p>在native中，创建对象的方式千差万别，设计模式中的创建型则基于这些不同的方式</p><a id="more"></a><h5 id="1-简单工厂模式：Simple-Factory"><a href="#1-简单工厂模式：Simple-Factory" class="headerlink" title="1.简单工厂模式：Simple Factory"></a>1.简单工厂模式：Simple Factory</h5><p>工厂模式什么意思？ 如果把我们编写业务代码的过程，比作造一台电视机，那么工厂模式就是先打造好生产电视机的流水线。如何打造生产线？？？ 我们将需要工厂制造的产物的特性抽象出来，在代码上表现为我们规定其属性名称，但其属性值又参数来决定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">name, pages, author</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> newBook = &#123;&#125;;</span><br><span class="line">    newBook.name = name;</span><br><span class="line">    newBook.pages = pages;</span><br><span class="line">    newBook.author = author;</span><br><span class="line">    <span class="keyword">return</span> newBook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一种工厂模式，其实现方式与之前学基础的<em>寄生继承</em>有点相似，也是在一个新的变量上去添加属性，使用字面量方式创建对象会比使用<code>new</code>高效的多。</p><p>还有一种就是先将不同型号的电视机造出来，然后通过工厂来输送到不同的产品区。 这里的工厂不在制造，而是充当<code>deliver</code>的角色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fictionBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'九州缥缈录'</span>;</span><br><span class="line">    <span class="keyword">this</span>.story = <span class="string">'铁甲依然在'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tellStory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.story)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classicBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'假如给我三天光明'</span>;</span><br><span class="line">    <span class="keyword">this</span>.author = <span class="string">'海伦凯勒'</span>;</span><br><span class="line">    <span class="keyword">this</span>.bookauthor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.author)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'fiction'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> fictionBook();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'classic'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> classicBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式优缺点十分明显， 第一种常见方式需要我们固定某些参数类型，限制了其多样性，但相比第二种省事多了。第二种则相反，每创造一种不同型号的电视机就需要我们去创建一个新的类并向分发类添加该选项。</p><h5 id="2-工厂方法模式-Factory-Method"><a href="#2-工厂方法模式-Factory-Method" class="headerlink" title="2.工厂方法模式: Factory Method"></a>2.工厂方法模式: Factory Method</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式    </span></span><br><span class="line"><span class="keyword">const</span> Factory = <span class="function"><span class="keyword">function</span> (<span class="params">type, content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Factory) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>[type](content);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Factory(type, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Factory.prototype = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="built_in">console</span>.log(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Factory(<span class="string">'show'</span>, <span class="string">'2'</span>);</span><br></pre></td></tr></table></figure><p>安全模式的好处在于，在简单工厂模式上加了一层限制，如果没有创建工厂类，就直接执行该函数而不是返回工厂对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象模式</span></span><br><span class="line"><span class="keyword">const</span> abstractFactory = <span class="function"><span class="keyword">function</span> (<span class="params">superType, subType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> abstractFactory[superType] === <span class="string">'function'</span> ) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        F.prototype = <span class="keyword">new</span> abstractFactory[superType]();</span><br><span class="line">        subType.constructor = subType;</span><br><span class="line">        subType.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未创建该抽象类'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstractFactory.desk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'desk'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstractFactory.desk.prototype = &#123;</span><br><span class="line">    getDeskSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getDeskMaterial: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化抽象desk类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.子类构造方法</span></span><br><span class="line"><span class="keyword">let</span> machilusDesk = <span class="function"><span class="keyword">function</span>(<span class="params">size, material</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">    <span class="keyword">this</span>.material = material;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 将子类构造方法送入工厂，继承工厂抽象方法</span></span><br><span class="line">abstractFactory(<span class="string">'desk'</span>, machilusDesk);</span><br><span class="line"><span class="comment">// 3. 覆盖抽象方法</span></span><br><span class="line">machilusDesk.prototype.getDeskSize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line">machilusDesk.prototype.getDeskMaterial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.material;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JS</code>中，<code>abstract</code>是一个保留关键字，所以想要实现抽象类，是不可能像传统的面向对象语言那么方便，但由于其灵活性，我们可以模拟出抽象类的主要行为。</p><p>抽象方法时不可调用的，会报错，所以我们模拟出其这个行为，并且采用寄生继承来继承父类。当工厂生成子类后，覆盖抽象方法，就不会报错了。</p><p>抽象模式是提前定义了类的结构，而不是直接创建类。就像建房子先画好房子的图纸一样，先描述出其轮廓~ </p><p>但<code>JS</code>中不支持抽象化创建和虚拟方法，所以其引用并不广泛，但也是面向对象编程中很经典常见的一种模式。</p><h5 id="3-建造者模式：-Builder"><a href="#3-建造者模式：-Builder" class="headerlink" title="3.建造者模式： Builder"></a>3.建造者模式： Builder</h5><p>如果说工厂模式的侧重点在创建的结果，那么建造者就是注重创建过程的一种模式。</p><p>建造者会注意创建过程的每个细节，就像我们捏橡皮人时，不光要注意身体的轮廓，还要注意头有多大，四肢有多长….理所当然的创建过程会复杂很多。 其过程就是将各种特性都封装成类，然后在主类里面根据不同参数，实例化不同的特性，组成新的子类，或者叫其复合对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">House</span>(<span class="params">parmas</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.material = parmas &amp;&amp; parmas.material || <span class="string">'**'</span>;</span><br><span class="line">    <span class="keyword">this</span>.area = parmas &amp;&amp; parmas.area || <span class="string">'**'</span>;</span><br><span class="line">&#125;</span><br><span class="line">House.prototype = &#123;</span><br><span class="line">    getMaterial: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.material;</span><br><span class="line">    &#125;,</span><br><span class="line">    getArea: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">material</span>(<span class="params">material</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.material = material;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.area = m * m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newHouse</span>(<span class="params">material, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _house = <span class="keyword">new</span> House();</span><br><span class="line">    _house.material = <span class="keyword">new</span> material(material);</span><br><span class="line">    _house.area = <span class="keyword">new</span> area(area);</span><br><span class="line">    <span class="keyword">return</span> _house;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像搭积木一样，先把各块积木的形状找好，然后组合在一起。抛出一个问题，如果要在一个网页上呈现卡片堆砌的效果，你会怎么做呢？ 个人理解，这个模式是我们经常解决生活中问题的一种方法的抽象，复杂的问题简单化，就是将一个复杂的事物拆分成多个简单的事物，再以某种方式组合起来，来解决问题的一种方法。</p><h5 id="4-原型模式：prototype"><a href="#4-原型模式：prototype" class="headerlink" title="4.原型模式：prototype"></a>4.原型模式：prototype</h5><p>其被称为语言之魂，它将原型对象指向创建对象的类，使这些类共享原型对象的方法和属性。</p><p>存在即合理，那么它解决了什么问题？在很多复杂的功能下，我们的子类需要继承父类的一些属性与方法，但是并非所有子类需求的属性和方法都是一致的，所以子类会从父类继承一些不必要的，增加额外开销的属性和方法。例如，一个车的父类，子类可能是跑车，轿车，SUV，越野，跑车需要整个车体结构和轿车不一样，但父类因为考虑整体性不会有特殊的车体结构，而是通用的轿车结构，那么子类就从父类继承了一些额外的负担性质的属性和方法。而子类每次实例化都会造成很多不可避免的额外开销。</p><p>原型概念就此而出，它将某些可复用，可共享的，开销大的属性和方法从父类提取出来放在原型之中，子类通过前文的某些继承方式来继承，直接获得这些属性和方法而不是每次实例化重新创建这些属性和方法，节省了很多不必要的开销。</p><p><code>js</code>在原型模式下实现的原型链，让所有内置的属性和方法都享受到该模式的好处。</p><p>其实现方式就是对一个对象的拷贝，也是一种继承方式，但很特殊的一点，创建过程于它无瓜，理解这一点很重要~</p><h5 id="5-单例模式：-singleton"><a href="#5-单例模式：-singleton" class="headerlink" title="5.单例模式： singleton"></a>5.单例模式： singleton</h5><p>这是<code>js</code>编程中很常见的一种模式，只允许实例化一次的对象类。有时生成命名空间<code>namespace</code>。多人协作开发或者加载独立的第三方库的时候，我们的词语总是有限的，怎么让它们的命名互不影响呢？答案说都开辟独立的命名空间，使得其方法名都可以区分开。同时，对我们在管理静态变量也非常有帮助。</p><p>风靡很多时的<code>Jquery</code>就是经典的例子，其<code>$</code>符就是命名空间，<code>$(&#39;className&#39;).function</code>这样的调用方式使得代码清晰明了，一看就知道是<code>Jquery</code>的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mynamespace = &#123;</span><br><span class="line">utils: &#123;</span><br><span class="line">formate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">.....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ajax: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">.....</span><br><span class="line">    &#125;</span><br><span class="line">MYHEIGHT: <span class="number">180</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是封装在一个对象里面，延展开来就是模块机制，把整个<code>js</code>文件作为一个对象，存放不同的命名空间，避免方法名的覆盖。</p><p>怎么实现只能实例化一次的对象类？ 妈耶，用个闭包记录，如果被实例化了，就<code>return</code>掉，easy。</p><p>什么？ 怎么创建一个闭包？？？ 建议你去看看《你不知道的javascript》,书中详细的论述了闭包是什么，怎么创建闭包，闭包的用途又是什么，闭包背后的作用机制其实是保持对作用域的引用等等。下次有空，结合书本我们来详解一下<code>js</code>中的闭包，解开其神秘的面纱。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>创建型设计模式是一些处理对象创建的模式，通过某种方式控制对象的创建来避免基本对象创建时可能导致设计上的问题或增加设计上的复杂度。</p></blockquote><p>创建单类简单对象的简单工厂模式，简单的缺点也很明显，于是工厂方法模式补足创建多类的实例(其实是传入不同参数的简单工厂模式和安全模式的混合)。建造者模式则是通过组合多种简单工厂模式，来创造复杂的对象。原型模式也被成为语言之魂，将某些属性和方法放在原型对象中作为所有对象的共有属性和方法，避免了子类每次实例化都会可能创建新的不必要的，开销大的属性和方法。单例模式则是为我们的代码管理做出了卓越的贡献。这五种模式中，原型模式并不关心对象创建过程，但对创建过程做出的贡献还是有目共睹，或许这就是大佬吧，润物细无声~</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event loop</title>
      <link href="/2019/05/19/Event%20loop/"/>
      <url>/2019/05/19/Event%20loop/</url>
      
        <content type="html"><![CDATA[<p>Event loop的粗浅认识</p><a id="more"></a><h5 id="事件轮询"><a href="#事件轮询" class="headerlink" title="事件轮询"></a>事件轮询</h5><p>js是单线程的。其事件轮询由：同步任务，异步任务，macrotask（宏任务），microtask （微任务）组成。其执行过程如下：</p><ul><li>同步任务： 主线程上的任务，前一个完成后后一个执行。</li><li>异步任务：不进入主线程，进入任务队列（task queue)中执行，等于macrotask。</li><li>macrotask：任务队列的主体，同一个队列内的“先进先出”执行。不同的队列之间“先进后出”执行。</li><li>microtask ：总在任务队列末尾执行，有新的microtask 继续加在末尾执行。</li></ul><p>执行过程：1.同步任务执行 2.  任务按队列依次执行 3.微任务按队列依次执行 4.重复1-3</p><h5 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h5><p>对于<code>宏任务</code>和<code>微任务</code>的概念的理解，一开始确实是不太清楚的。</p><p>先来说说<code>宏任务</code>，我们不妨这样来看，既然它是<strong>任务队列的主体</strong>，那么它一定由一个或者多个任务构成。抛开<code>JS</code>,[宏]这个字本身就不是单一的，在<code>CS</code>中的[宏]就是<strong>批量处理</strong>的意思。</p><p>对于稍微了解过一点点<code>c</code>的人来说，应该都不陌生，辟如：编译预处理命令，宏定义等等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译预处理命令</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure><p>我将[编译预处理命令]（在编译之前进行的处理）就看做是[宏任务]，就是你写了一系列的前置操作，在后面的代码执行之前，这些宏任务全部需要执行完毕~</p><p>稍微生活化一点点，比如那个中国互联网起步的时候，我的同学之间，喜欢用QQ等级作为谈资。所以我让我的<strong>电脑开机后自动登录QQ</strong>；或者现今5G来临之前，男生多半玩过的MOBA类游戏，就拿LOL中的瞎子<strong>摸眼R闪</strong>这种操作，你完全可以选一个拥有宏命令的鼠标，设置测试后一键完成这种“用双手成就你的梦想”等秀的飞起的操作；还有诸如乔碧萝之类的人士，开启直播推流之前，对自己<strong>直播效果的优化</strong>。这些都是所谓<strong>宏任务</strong>。</p><p>至于<code>微任务</code>，相信聪明可爱的你一定能够举一反一，找到自己对其充分的理解~:smile:</p><p>常见的宏任务和微任务：</p><p><strong>宏任务</strong>：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>requestAnimationFrame</li><li>I/O</li><li>UI rendering</li></ul><p><strong>微任务</strong>：</p><ul><li>process.nextTick</li><li>Promises</li><li>Object.observe</li><li>MutationObserver</li></ul><p><strong>执行图例</strong></p><p>希望执行帧动画能让你对整个过程的理解清晰许多</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/18/16860ae5ad02f993?imageslim" alt=""></p><h5 id="小练习1"><a href="#小练习1" class="headerlink" title="小练习1"></a><strong>小练习1</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器输出顺序：</span></span><br><span class="line"><span class="comment">//script start</span></span><br><span class="line"><span class="comment">//script end</span></span><br><span class="line"><span class="comment">//promise1</span></span><br><span class="line"><span class="comment">//promise2</span></span><br><span class="line"><span class="comment">//setTimeout</span></span><br></pre></td></tr></table></figure><h5 id="小练习2"><a href="#小练习2" class="headerlink" title="小练习2"></a><strong>小练习2</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)  </span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"><span class="comment">// 浏览器输出顺序：</span></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">//async1 start</span></span><br><span class="line"><span class="comment">//async2</span></span><br><span class="line"><span class="comment">//promise1</span></span><br><span class="line"><span class="comment">//script end</span></span><br><span class="line"><span class="comment">//async1 end</span></span><br><span class="line"><span class="comment">//promise2</span></span><br><span class="line"><span class="comment">//setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>await会将之后的代码抛入下一个执行队列，代码上的表现就是执行完await的会跳出函数体执行其他的同步任务。</li><li>setTimeout的回调函数会进入下一个同步任务队列中。</li><li>如果输出顺序不一致，是因为各大浏览器对异步的处理是不一样的，没什么奇怪的。</li><li>另外，node环境输出顺序也有很大差异。</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javascript event loop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
